{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\2023\\\\CODING DOJO\\\\MERN\\\\socketio_project\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [socket] = useState(() => io(':8000'));\n  const [message, setMessage] = useState('');\n  const [chatLog, setChatLog] = useState([]);\n  const [username, setUsername] = useState('');\n  useEffect(() => {\n    const username = prompt('Enter your username');\n    setUsername(username);\n    // Send username to server for login\n    socket.emit('login', username);\n    // Listen for incoming chat messages from the server\n    socket.on('chat_message', data => {\n      const senderId = data.username;\n      const message = data.message;\n\n      // Use the sender's socket ID and message as needed\n      console.log('Received message from:', senderId);\n      console.log('Message:', message);\n      setChatLog(prevChatLog => [...prevChatLog, data]);\n    });\n    console.log('chat log sent', chatLog);\n    // Clean up the event listener when the component unmounts\n    return () => {\n      socket.off('chat_message');\n    };\n  }, []);\n  const handleSendMessage = () => {\n    // Emit the chat message to the server\n    socket.emit('chat_message', message);\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chatLog.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msg.message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 39\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SiCc4nChZI2vfw+OAL6ckuQNUh0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","App","_s","socket","message","setMessage","chatLog","setChatLog","username","setUsername","prompt","emit","on","data","senderId","console","log","prevChatLog","off","handleSendMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","map","msg","index","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/2023/CODING DOJO/MERN/socketio_project/client/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\n\nfunction App () {\n  const [socket] = useState (() => io (':8000'));\n  const [message, setMessage] = useState ('');\n  const [chatLog, setChatLog] = useState ([]);\n  const [username, setUsername] = useState('');\n\n  useEffect (() => {\n    const username = prompt('Enter your username');\n    setUsername(username);\n    // Send username to server for login\n    socket.emit('login', username);\n    // Listen for incoming chat messages from the server\n    socket.on ('chat_message', data => {\n      const senderId = data.username;\n      const message = data.message;\n\n      // Use the sender's socket ID and message as needed\n      console.log ('Received message from:', senderId);\n      console.log ('Message:', message);\n\n      setChatLog (prevChatLog => [...prevChatLog, data]);\n    });\n    console.log ('chat log sent', chatLog);\n    // Clean up the event listener when the component unmounts\n    return () => {\n      socket.off ('chat_message');\n    };\n  }, []);\n\n  const handleSendMessage = () => {\n    // Emit the chat message to the server\n    socket.emit ('chat_message', message);\n    setMessage ('');\n  };\n\n  return (\n    <div>\n      <h1>Chat App</h1>\n      <div>\n      <input\n        type=\"text\"\n        value={username}\n        onChange={e => setUsername(e.target.value)}\n      />\n      <button onClick={handleSendMessage}>Send</button>\n      </div>\n      <div>\n        {chatLog.map ((msg, index) => <p key={index}>{msg.message}</p>)}\n      </div>\n      <input\n        type=\"text\"\n        value={message}\n        onChange={e => setMessage (e.target.value)}\n      />\n      <button onClick={handleSendMessage}>Send</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}